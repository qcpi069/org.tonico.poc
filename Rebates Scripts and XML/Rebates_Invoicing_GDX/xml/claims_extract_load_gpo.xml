
<!-- Extract/Load APC Claims For GPO Model Type  
     Loads APC Claims/reports for a specific quarter. Quarter can be passed in as parameter, or will query cycle table
     to find out the current processing cycle. 
     Datasource definition file datasource.xml is in the ./java/Common_java_db_interface/conf.
     
     Parameter 1 : Optional, has year and quarter info. format: "hyphenhyphenperiod  YYYYQ"  'YYYY': 4 digit year, 
     		  'Q':quarter number ('1', '2', '3', '4'). Example: hyphenhyphenperiod  20053 , 
     		   this should be the parameter passed into XML. 
     		   Note: hyphenhyphen means the two characters. xml does not allow it in the comments, it is part 
     		   of the reserved symbols.
     Parameter 2 : Required. name of the query definition xml file, defines the commands to perform. 
     		   The XML file should reside under ./xml directory
     		        
     Maestro Command with parameter: ./scripts/Common_java_db_interface.ksh hyphenhyphenperiod  20054 claims_extract_load_gpo.xml
     Maestro Command without parameter: ./scripts/Common_java_db_interface.ksh claims_extract_load_gpo.xml
-->

<sqml>	
	<property name="TIMEOUT" value="0"/>
	<!-- datasource.xml defines DB connection info. It should be under ./java/Common_java_db_interface/conf-->
	<datasources resource="datasource.xml"/>
	
	<!--
		Set-up a try block to send an email on exception.	
	-->         
	<command type="try">
	<try>

		<!-- Query DB for current processing quarter info -->
		<command type="run" datasource="silver" rowName="cycle"><![CDATA[
			SELECT TO_CHAR(cycle_start_date,'MM/DD/YYYY') as db2QBegin				      
			      ,TO_CHAR(cycle_end_date,'MM/DD/YYYY') as db2QEnd	
			      ,rbate_cycle_gid||'' as oraQParm
			      ,'Q0'|| substrb((rbate_cycle_gid),6,1)||substrb((rbate_cycle_gid),3,2) as db2QParm			      
			      ,substrb((rbate_cycle_gid),1,4)||'0'||substrb((rbate_cycle_gid),6,1) as checkParm
			FROM dma_rbate2.t_rbate_cycle
			WHERE rbate_cycle_gid = (SELECT MAX(rbate_cycle_gid) 
						FROM dma_rbate2.t_rbate_cycle
						WHERE rbate_cycle_type_id = 2
						AND   rbate_cycle_status = UPPER('C'))
		]]></command>
		<!-- Command to set quarter parameters, either from DB or parameter-->
		<command type="java"><![CDATA[
		         String db2QBegin ="";
		         String db2QEnd ="";
		         String db2QParm ="";
		         String oraQParm ="";
		         String period ="";
		         String y ="";
		         String q ="";
		         int qNum = 0;
		         String partition ="";
		         String checkParm="";
		         
			if (script.getProperty("period") == null) {
			//If no quarter parameter passed in, get from DB
				 db2QBegin = script.getProperty("cycle.1");
				 db2QEnd = script.getProperty("cycle.2");
				 db2QParm = script.getProperty("cycle.4");
				 oraQParm = script.getProperty("cycle.3");
				 checkParm = script.getProperty("cycle.5");
				if (db2QBegin==null || db2QBegin.trim().length()==0||
				    db2QEnd==null || db2QEnd.trim().length()==0||
				    db2QParm==null || db2QParm.trim().length()==0||
				    oraQParm==null || oraQParm.trim().length()==0)
				{// If invalid info from database throw error
				 throw new Exception("Processing Cycle Info not found in dma_rbate2.t_rbate_cycle.");
				}
				
				//Make the variables available to other queries below
				script.setProperty("db2qparm",db2QParm);
				script.setProperty("oraQParm",oraQParm);
				script.setProperty("db2QBegin",db2QBegin);
				script.setProperty("db2QEnd",db2QEnd);
				partition = "p_"+oraQParm;
				script.setProperty("apartition",partition);
				script.setProperty("checkParm",checkParm);
			}else {//There is a parameter passed in called 'period'
			     period = script.getProperty("period");
			   
			    if (period.trim().length()==5) 
			    {			   
			       y = period.substring(0, 4);
			       q = period.substring(4, 5);
			       qNum = Integer.parseInt(q);
			      
			      
			      if (qNum == 1)
			      {
			      //string operation does not work
			      script.setProperty("db2QBegin","1/1/"+y);
				  script.setProperty("db2QEnd","3/31/"+y);

			      }else if (qNum == 2)
			      {			         
				  script.setProperty("db2QBegin","4/1/"+y);
				  script.setProperty("db2QEnd","6/30/"+y);
				  

			      }else if (qNum == 3)
			      {
				  script.setProperty("db2QBegin","7/1/"+y);
				  script.setProperty("db2QEnd","9/30/"+y);

			      }else if (qNum == 4)
			      {
				  script.setProperty("db2QBegin","10/1/"+y);
				  script.setProperty("db2QEnd","12/31/"+y);

			      }
			      /* switch does not work
			      switch (qNum) {
				case 1: 
				System.out.println("*************qNum: "+qNum);
				  db2QBegin = "1/1/"+y;
				  db2QEnd = "3/31/"+y;
				  break;
				case 2:
				  db2QBegin = "4/1/"+y;
				  db2QEnd = "6/30/"+y;
				  break;
				case 3: 
				  db2QBegin = "7/1/"+y;
				  db2QEnd = "9/30/"+y;
				  break;
				case 4: 
				  db2QBegin = "10/1/"+y;
				  db2QEnd = "12/31/"+y;
				  break;
				default:
				  break;
				}
				*/
				
				 db2QParm = "Q0"+q+(y).substring(2);
				 oraQParm = y+"4"+q;
				 checkParm = y+"0"+q;
				 partition = "p_"+oraQParm;				
				script.setProperty("apartition",partition);
				script.setProperty("db2qparm",db2QParm);
				script.setProperty("oraQParm",oraQParm);
				script.setProperty("checkParm",checkParm);
			    }else {
			      throw new Exception("Invalid period parameter! Should be in a format as  '20053'.");
			    }
			}

		]]></command>
		
		<!-- Truncate the claims partition for the quarter before the run-->
		<command type="run" datasource="silver" transaction="true"><![CDATA[
			call dma_rbate2.PK_CYCLE_UTIL.TRUNCATE_PARTITION('a_gpo_rbate_inv','${apartition}', NULL)
		]]></command>
		
		<!-- delete report records for the quarter-->
		<command type="run" datasource="silver" transaction="true"><![CDATA[
					DELETE FROM DMA_RBATE2.A_GPO_REPORT WHERE CYCLE_GID = ?{oraQParm}
		]]></command>
		
		
		<!-- This is the actual extract and load, extract from source, load into target-->
		<!--
		    Get the CLT_ID as RBATE_ID from VCLAIM_GPO for GPO model	
		--> 
		<command type="copy" batch="500">
			<source type="sql" datasource="gdxprd"><![CDATA[
				

               WITH 
                   SET_A (cycle_gid,claim_ID, rpt_id,mda_excpt_id,rbate_access,RBATE_MRKT_SHR,RBATE_ADMIN_FEE,RBATE_ID,UNIT_QTY,DLVRY_SYS_CD,PMT_SYS_ELIG_CD,FRMLY_SRC_CD) AS (
                                      select ${oraQParm} as CYCLE_GID, 
				        	ext.CLAIM_ID as CLAIM_GID, 
                                                max(ext.RPT_ID) as RPT_ID, 
                                                CASE WHEN (sum((ext.BASE_DISCNT_AMT + ext.FRMLY_DISCNT_AMT + ext.CNTRCT_DISCNT_AMT + ext.PRC_PTCT_DISCNT_AMT)) <> 0 and 
                                                   sum(ext.PRFMC_DISCNT_AMT) <> 0) THEN 90 
                                                WHEN (sum((ext.BASE_DISCNT_AMT + ext.FRMLY_DISCNT_AMT + ext.CNTRCT_DISCNT_AMT + ext.PRC_PTCT_DISCNT_AMT)) <> 0 and 
                                                   sum(ext.PRFMC_DISCNT_AMT) = 0) THEN  91
                                                WHEN (sum((ext.BASE_DISCNT_AMT + ext.FRMLY_DISCNT_AMT + ext.CNTRCT_DISCNT_AMT + ext.PRC_PTCT_DISCNT_AMT)) = 0 and 
                                                   sum(ext.PRFMC_DISCNT_AMT) <> 0) THEN 92
                                                ELSE 91
                                                END  as MDA_EXCPT_ID,   
                                                sum((ext.BASE_DISCNT_AMT + ext.FRMLY_DISCNT_AMT + ext.CNTRCT_DISCNT_AMT + ext.PRC_PTCT_DISCNT_AMT)) as RBATE_ACCESS,  
                                                sum(ext.PRFMC_DISCNT_AMT) as RBATE_MRKT_SHR, 
                                                sum(ext.ADMN_DISCNT_AMT) as RBATE_ADMIN_FEE,
                                                max(vgpo.RBAT_ID) as RBATE_ID,
						max(vgpo.DSPNSD_QTY) as UNIT_QTY,
						max(vgpo.DLVRY_SYS_CD) as DLVRY_SYS_CD,
                                                max(TAR.PMT_SYS_ELIG_CD) as PMT_SYS_ELIG_CD,
                                                max(vgpo.frmly_src_cd) as frmly_src_cd 
    		        		from VRAP.TDISCNT_EXT_CLAIM_GPO ext ,
	            			     VRAP.VCLAIM_GPO vgpo,
                                             VRAP.TDISCNT_APC_RPT TAR,
                                             VRAP.VRPT_CD VR
            			       where TAR.QUARTER_ID = (SELECT QUARTER_ID FROM VRAP.TCUR_INV_PRD)
                                         AND TAR.MODEL_TYP_CD = 'G'
                                         AND VR.RPT_CD = TAR.RPT_TYP_CD
                                         AND VR.RPT_CD_NM LIKE 'R%'
                                         AND ext.PERIOD_ID in (SELECT PERIOD_ID
                                                                 FROM VRAP.TDISCNT_PERIOD
                                                                WHERE QUARTER_ID = (SELECT QUARTER_ID FROM VRAP.TCUR_INV_PRD))
                                         AND ext.DISCNT_RUN_MODE_CD IN ('PROD', 'MPRD')
                                         AND ext.hvst_id = TAR.hvst_id
                                         AND ext.PERIOD_ID = TAR.PERIOD_ID
                                         AND ext.DISCNT_RUN_MODE_CD = TAR.DISCNT_RUN_MODE_CD
                                         AND ext.CLAIM_ID = vgpo.CLAIM_ID
                                         AND vgpo.INV_ELIG_DT between date('${db2QBegin}') and date('${db2QEnd}')
            				group by ext.CLAIM_ID

                   ),
                   SET_B  (cycle_gid,claim_ID, rpt_id,mda_excpt_id,rbate_access,RBATE_MRKT_SHR,RBATE_ADMIN_FEE,RBATE_ID,UNIT_QTY,DLVRY_SYS_CD,PMT_SYS_ELIG_CD,FRMLY_SRC_CD) AS (
	                              select ${oraQParm} as CYCLE_GID, 
            					iv.CLAIM_ID as CLAIM_GID, 
            					iv.RPT_ID as RPT_ID, 
	            				tc.CLM_EXCL_REAS_CD as MDA_EXCPT_ID,  
            					0 as RBATE_ACCESS, 
                				0 as RBATE_MRKT_SHR, 
            					0 as RBATE_ADMIN_FEE,
            					vgpo.RBAT_ID as RBATE_ID,
						vgpo.DSPNSD_QTY as UNIT_QTY,
						vgpo.DLVRY_SYS_CD as DLVRY_SYS_CD,
                                                iv.PMT_SYS_ELIG_CD,
                                                vgpo.frmly_src_cd as frmly_src_cd 
            				from    VRAP.VCLAIM_GPO vgpo,
            					VRAP.TATTR_COMB tc,
            					(select ROW_NUMBER() over (partition by texc.CLAIM_ID order by texc.ATTR_COMB_CD desc) ROW_NUM,
                						texc.CLAIM_ID,
                						texc.ATTR_COMB_CD,
                						texc.RPT_ID,
                						texc.DISCNT_RUN_MODE_CD,
                						texc.PERIOD_ID,
                                                                texc.HVST_ID,
                                                                TAR.PMT_SYS_ELIG_CD
            					 from VRAP.TDISCNT_EXCL_EXT_CLAIM_GPO texc,
                                                      VRAP.TDISCNT_APC_RPT TAR
                                                where TAR.QUARTER_ID = (SELECT QUARTER_ID FROM VRAP.TCUR_INV_PRD)
                                                  AND TAR.MODEL_TYP_CD = 'G' 
                                                  AND TAR.RPT_TYP_CD = 26
                                                  AND texc.PERIOD_ID in (select PERIOD_ID
                                                                           from VRAP.TDISCNT_PERIOD
                                                                          where QUARTER_ID = (SELECT QUARTER_ID
                                                                                                FROM VRAP.TCUR_INV_PRD))
                                                  AND texc.hvst_id = TAR.hvst_id
                                                  AND texc.PERIOD_ID = TAR.PERIOD_ID
                                                  AND texc.DISCNT_RUN_MODE_CD = TAR.DISCNT_RUN_MODE_CD) iv
                			where 	iv.ROW_NUM = 1
            				AND 	iv.CLAIM_ID = vgpo.CLAIM_ID
 					AND     vgpo.INV_ELIG_DT between date('${db2QBegin}') and date('${db2QEnd}')
                                        AND     iv.ATTR_COMB_CD = tc.ATTR_COMB_CD
                   ),
                   SET_C  (cycle_gid,claim_ID, rpt_id,mda_excpt_id,rbate_access,RBATE_MRKT_SHR,RBATE_ADMIN_FEE,RBATE_ID,UNIT_QTY,DLVRY_SYS_CD,PMT_SYS_ELIG_CD,FRMLY_SRC_CD) AS (
                            select ${oraQParm} as CYCLE_GID, 
                                   exi.CLAIM_ID as CLAIM_GID, 
                                   0 as RPT_ID, 
                                   39 as MDA_EXCPT_ID,  
                                   0 as RBATE_ACCESS,
                                   0 as RBATE_MRKT_SHR, 
                                   0 as RBATE_ADMIN_FEE,
                                   exi.CLT_ID as RBATE_ID,
				   exi.DSPNSD_QTY as UNIT_QTY,
				   exi.DLVRY_SYS_CD as DLVRY_SYS_CD,
                                   '1' as PMT_SYS_ELIG_CD,
                                   exi.frmly_src_cd as frmly_src_cd 
                                from VRAP.VCLAIM_GPO exi  
                                where ( exi.INV_ELIG_DT between date('${db2QBegin}') and date('${db2QEnd}'))    
                   )
                   SELECT SET_A.* FROM SET_A
                   UNION ALL
                   SELECT SET_B.* FROM SET_B LEFT JOIN SET_A ON (SET_B.claim_ID = SET_A.claim_ID) 
                                 WHERE SET_A.claim_ID IS NULL
                   UNION ALL
                   SELECT SET_C.* FROM SET_C LEFT JOIN SET_A ON (SET_C.claim_ID = SET_A.claim_ID) 
                                             LEFT JOIN SET_B ON (SET_C.claim_ID = SET_B.claim_ID) 
                                 WHERE SET_A.claim_ID IS NULL AND SET_B.claim_ID IS NULL

              

		

			]]></source>

			<target
				type        = "queue"
				threadCount = "5">
				<target
					type           = "sql"
					datasource     = "silver"
					transaction    = "true"
					batch          = "500"
					reportInterval = "50000"
					queryTimeout   = "${TIMEOUT}"
				><![CDATA[
					INSERT INTO dma_rbate2.a_gpo_rbate_inv (CYCLE_GID, CLAIM_GID, 
					RPT_ID, MDA_EXCPT_ID, RBATE_ACCESS,RBATE_MRKT_SHR, RBATE_ADMIN_FEE, RBATE_ID,UNIT_QTY,DLVRY_SYS_CD,PYMT_SYS_ELIG_CD,FRMLY_SRC_CD) 
					VALUES (?,?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
				]]></target>
			 </target>  
		</command>
		
		<!-- Extract reports from the source, and load into the target-->
		<command type="copy" batch="500">
			<source type="sql" datasource="gdxprd"><![CDATA[
				select ${oraQParm} as CYCLE_GID,
				rqmt.RPT_ID, 
				rqmt.RPT_TITLE, 
				vndr.NDC5_NB as PICO_NO, 
				'002', 
				'CONTRACT 002' 
				from 	VRAP.TRPT_REQMT rqmt, 
				VRAP.TVNDR vndr, 
				VRAP.TCNTRCT cntr, 
				VRAP.THIERARCHY thier, 
				VRAP.VRPT_CD rptcd  
				where cntr.MODEL_TYP_CD = 'G'   
				and  vndr.VNDR_ID  = cntr.VNDR_ID   
				and  rqmt.HRCY_ID = thier.HRCY_ID
				and  cntr.CNTRCT_ID = thier.CNTRCT_ID
				and  rptcd.RPT_CD = rqmt.RPT_TYP_CD  
				and  rptcd.RPT_CD_NM LIKE 'R%'  
				order by rqmt.RPT_ID

			]]></source>

			<!--<target
				type        = "queue"
				threadCount = "5"
			-->

				<target
					type           = "sql"
					datasource     = "silver"
					transaction    = "true"
					batch          = "500"
					reportInterval = "50000"
					queryTimeout   = "${TIMEOUT}"
				><![CDATA[
					Insert into DMA_RBATE2.A_GPO_REPORT ( CYCLE_GID,RPT_ID,RPT_TITLE,PICO_NO
					,CNTRC_NO,CNTRC_TXT ) values (?,?,?,?,?,?)
				]]></target>
			 <!--</target>  -->
		</command>

	</try>
	<catch>

	<!-- Send an email on error -->
		<command
			type="mail"
			mailTo="${email_address}"
			mailFrom="Claims_Extract@caremark.com"
			subject="[${region}] [ERROR] Extract/Load APC Claims GPO"
			contentType="text/html"
			throwsException="false"
		><![CDATA[
			<html>
			<head>
			<title>[ERROR] Extract/Load APC Claims GPO"</title>
			</head>
			<body>

			<h3><u>[ERROR] Extract/Load APC Claims GPO"</u></h3>

			<table cellpadding="2">
				<tr><td><b>Host:</b></td><td>${localhost}<td></tr>
				<tr><td><b>Started:</b></td><td>${startTime}<td></tr>
				<tr><td><b>Script:</b></td><td>${scriptName}<td></tr>
				#if (${system.getProperty('logfile')})
					<tr>
						<td><b>Log File:</b></td>
						<td>
							${system.getProperty('logfile')}
						<td>
					</tr>
				#end
			</table>

			<br>			
			<br>

			#if (${script.getLastStatement()})
				<h3><u>Last Statement</u></h3>
				<font style="color: blue; font-size: small">	
				${script.getLastStatement()}
				</font>

				<br>
				<br>
			#end

			<h3><u>Stack Trace</u></h3>		
			<pre style="color: red; font-size: small;">${stackTrace}</pre>
			</body>
			</html>
		]]></command>

	</catch>
	</command>
</sqml>
