
<!-- Generate Allocation Summary Reports  -->

<sqml>
	<property name="TIMEOUT" value="0"/>
	<datasources resource="datasource.xml"/>
	<properties resource="datamart.properties"/>

    <command type="java"><![CDATA[
        mailto=script.getProperty("mailto");
		dmt_schema=script.getProperty("dmt_schema");
        pmt_schema=script.getProperty("pmt_schema");
	]]></command>
		       
	<command type="try">
		<try>


 <!--   count the number of unreported distribution processs -->
			<command type="run" datasource="datamart" rowName="cnt1">
				<![CDATA[ 
 select count(distinct(p.prcs_nb)) from ${pmt_schema}.ksz6005_pcntl_trk p
    inner join ${pmt_schema}.ksrb250_distr d on ( d.prcs_nb = p.prcs_nb )
   where p.prcs_typ_cd = 23
    and p.prcs_stat_cd = 'C' 
    and d.obj_stat_cd = 'C'
    and p.prcs_nb not in (select z.prcs_nb from ${dmt_schema}.reported_process z)  
				]]>
			</command>

			<command type="java">
			    cnt1 = 0;
                tcnt = script.getProperty("cnt1.1");
                if ( tcnt != null ) {
                    cnt1 = tcnt.intValue();
					System.out.println(new Date() + " count of unreported processes is "+cnt1 );	
                } else {
				    cnt1 = 0;
                    System.out.println(new Date() + " no unreported processes found " );	
				}
                script.setProperty("cnt1", cnt1);							
			</command> 


  <!--   remote shell to Microstrategy to generate the report -->
			<command type="java">

			import java.sql.*;
			import java.util.Date;

            Class.forName("com.ibm.db2.jcc.DB2Driver");
      
            Connection db2Conn =  DriverManager.getConnection("jdbc:db2://r07prd05:50000/RPS_PRD","rpsadm","cloud9");
			Statement st = db2Conn.createStatement();
		    Statement st2 = db2Conn.createStatement();

            int curpid = 0;
			cnt1 = script.getProperty("cnt1");	
            int count = 1;
			boolean isrunning = false;
			int trycount = 0;

            while (count &lt; (cnt1+1)) {
               System.out.println(new Date() + " Count is: " + count);

                String query = "select min(p.prcs_nb) as pid from "+script.getProperty("pmt_schema")+".ksz6005_pcntl_trk p inner join "+script.getProperty("pmt_schema")+".ksrb250_distr d on ( d.prcs_nb = p.prcs_nb ) where p.prcs_typ_cd = 23  and p.prcs_stat_cd = 'C'  and d.obj_stat_cd = 'C' and p.prcs_nb not in (select z.prcs_nb from "+script.getProperty("dmt_schema")+".reported_process z)";

                curpid = 0;
                ResultSet resultSet = st.executeQuery(query);
                while (resultSet.next()) {
                    curpid =  resultSet.getInt("pid");
				} 

                if ( curpid &gt; 0 ) {
                   System.out.println(new Date() + " reporting for distribution process: "+curpid );
 
                   System.out.println(new Date() + " starting remote shell "+count );  
				   Process p = Runtime.getRuntime().exec("rsh 204.99.7.229 rebates_payments_ncst.bat prod");   
                   BufferedReader stdInput = new BufferedReader(new 
                      InputStreamReader(p.getInputStream()));
                   BufferedReader stdError = new BufferedReader(new 
                      InputStreamReader(p.getErrorStream()));

                   System.out.println(new Date() + "Here is the standard output of the command: ");
                   while ((s = stdInput.readLine()) != null) {
                     System.out.println(s);
                   }
        
                   System.out.println(new Date() + "Here is the standard error of the command (if any): ");
                   while ((s = stdError.readLine()) != null) {
                       System.out.println(s);
                   }
                   System.out.println(new Date() + " end remote shell ");

                   isrunning = true;
				   trycount = 0;

				   while ( isrunning ) {
                     trycount++;
                     try {
				        System.out.println(new Date() + "sleeping at trycount "+trycount+" \n");
					    Thread.sleep (600000);   
				      } catch (InterruptedException e) {}
                      System.out.println(new Date() + "awake \n");

                      String query2 = "select prcs_nb from "+script.getProperty("dmt_schema")+".reported_process where prcs_nb = "+curpid+" ";
                      ResultSet resultSet2 = st2.executeQuery(query2);
                      while (resultSet2.next()) {
                       isrunning = false;
				      } 
	                  if ( trycount > 50 ) {
                         System.out.println(new Date() + "report for process id "+x+" not done after "+trycount+" tries, aborting. \n");
                         isrunning = false;
						 count = cnt1+1;
                      }

				   }


	           }

               count++;
             }		     	
		
			db2Conn.commit();           
            st2.close();
            db2Conn.close();

			</command> 


		</try>
		<catch>
			<!-- Send an email on error -->
			<command
				type="mail"
				mailTo="${mailto}"
				mailFrom="RPDM_7750J_Archive_Rpt"
				subject="[ERROR] Generate Allocation Summary Rpt "
				contentType="text/html"
				throwsException="false"
			><![CDATA[
				<html>
				<head>
				<title>[ERROR] Generate Allocation Summary Rpt</title>
				</head>
				<body>
			
				<h3><u>[ERROR] Generate Allocation Summary Rpt </u></h3>
			
				<table cellpadding="2">
					<tr><td><b>Host:</b></td><td>${localhost}<td></tr>
					<tr><td><b>Started:</b></td><td>${startTime}<td></tr>
					<tr><td><b>Script:</b></td><td>${scriptName}<td></tr>
					#if (${system.getProperty('logfile')})
						<tr>
							<td><b>Log File:</b></td>
							<td>
								${system.getProperty('logfile')}
							<td>
						</tr>
					#end
				</table>

				<br>			
				<br>
				
				#if (${script.getLastStatement()})
					<h3><u>Last Statement</u></h3>
					<font style="color: blue; font-size: small">	
					${script.getLastStatement()}
					</font>
				
					<br>
					<br>
				#end
			
				<h3><u>Stack Trace</u></h3>		
				<pre style="color: red; font-size: small;">${stackTrace}</pre>
				</body>
				</html>
			]]></command>
		</catch>
	</command>
</sqml>
